/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * F1 Dashboard API
 * The F1 Dashboard API description
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  SeasonDto
} from '../f1DashboardAPI.schemas';





/**
 * @summary Get all F1 seasons
 */
export const seasonsControllerFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SeasonDto[]>> => {
    
    
    return axios.default.get(
      `/seasons`,options
    );
  }


export const getSeasonsControllerFindAllQueryKey = () => {
    return [`/seasons`] as const;
    }

    
export const getSeasonsControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof seasonsControllerFindAll>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof seasonsControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSeasonsControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof seasonsControllerFindAll>>> = ({ signal }) => seasonsControllerFindAll({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof seasonsControllerFindAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SeasonsControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof seasonsControllerFindAll>>>
export type SeasonsControllerFindAllQueryError = AxiosError<unknown>


export function useSeasonsControllerFindAll<TData = Awaited<ReturnType<typeof seasonsControllerFindAll>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof seasonsControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof seasonsControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof seasonsControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSeasonsControllerFindAll<TData = Awaited<ReturnType<typeof seasonsControllerFindAll>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof seasonsControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof seasonsControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof seasonsControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSeasonsControllerFindAll<TData = Awaited<ReturnType<typeof seasonsControllerFindAll>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof seasonsControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all F1 seasons
 */

export function useSeasonsControllerFindAll<TData = Awaited<ReturnType<typeof seasonsControllerFindAll>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof seasonsControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSeasonsControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get a specific F1 season by year
 */
export const seasonsControllerFindOne = (
    year: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SeasonDto>> => {
    
    
    return axios.default.get(
      `/seasons/${year}`,options
    );
  }


export const getSeasonsControllerFindOneQueryKey = (year: number,) => {
    return [`/seasons/${year}`] as const;
    }

    
export const getSeasonsControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof seasonsControllerFindOne>>, TError = AxiosError<void>>(year: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof seasonsControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSeasonsControllerFindOneQueryKey(year);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof seasonsControllerFindOne>>> = ({ signal }) => seasonsControllerFindOne(year, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(year), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof seasonsControllerFindOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SeasonsControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof seasonsControllerFindOne>>>
export type SeasonsControllerFindOneQueryError = AxiosError<void>


export function useSeasonsControllerFindOne<TData = Awaited<ReturnType<typeof seasonsControllerFindOne>>, TError = AxiosError<void>>(
 year: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof seasonsControllerFindOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof seasonsControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof seasonsControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSeasonsControllerFindOne<TData = Awaited<ReturnType<typeof seasonsControllerFindOne>>, TError = AxiosError<void>>(
 year: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof seasonsControllerFindOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof seasonsControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof seasonsControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSeasonsControllerFindOne<TData = Awaited<ReturnType<typeof seasonsControllerFindOne>>, TError = AxiosError<void>>(
 year: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof seasonsControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a specific F1 season by year
 */

export function useSeasonsControllerFindOne<TData = Awaited<ReturnType<typeof seasonsControllerFindOne>>, TError = AxiosError<void>>(
 year: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof seasonsControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSeasonsControllerFindOneQueryOptions(year,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



